import React, { useCallback, useEffect, useRef, useState } from 'react';
import Portal from '../Portal';
import { ReactEditor, useSlate } from 'slate-react';
import { BaseSelection } from 'slate';
import editorUtility from '@/lib/editorUtility';
import { Card, CardContent } from '../ui/card';
// import { Label } from '../ui/label';
// import { Input } from '../ui/input';
// import { Button } from '../ui/button';
// import { Icons } from '../icons';
// import {
//     Tooltip,
//     TooltipContent,
//     TooltipProvider,
//     TooltipTrigger,
// } from '../ui/tooltip';

interface LinkPopoverProps {
    isLinkPopver: boolean;
    linkPopoverToggle: (value: boolean) => void;
}

function Linkpopover({ isLinkPopver, linkPopoverToggle }: LinkPopoverProps) {
    const linkRef = useRef<HTMLDivElement>(null);
    const [originalSelection, setOriginalSelection] =
        useState<BaseSelection | null>(null);
    const editor = useSlate();

    const actionHandler = useCallback(
        (e: KeyboardEvent | MouseEvent) => {
            if (isLinkPopver && !linkRef.current?.contains(e.target)) {
            }
        },
        [linkRef, isLinkPopver],
    );

    useEffect(() => {
        document.addEventListener('mousedown', actionHandler);
        document.addEventListener('keydown', actionHandler);
        return () => {
            document.removeEventListener('mousedown', actionHandler);
            document.removeEventListener('keydown', actionHandler);
        };
    }, [actionHandler]);

    useEffect(() => {
        const { selection } = editor;
        const el = linkRef.current;

        if (!el || !selection || !isLinkPopver) {
            el?.removeAttribute('style');
            return;
        }

        const domRange = ReactEditor.toDOMRange(editor, selection);
        const rect = domRange.getBoundingClientRect();
        const CARET_TOP_OFFSET = 15;
        el.style.opacity = '1';
        el.style.top = `${
            rect.top + rect.height + window.pageYOffset + CARET_TOP_OFFSET
        }px`;
        let calPos = rect.left - el.offsetWidth / 2;

        el.style.left = `${calPos}px`;
    }, [isLinkPopver, editor]);
    return (
        <Portal>
            <div
                ref={linkRef}
                className="absolute opacity-0 -left-[10000px] -top-[10000px]"
            >
                <Card className="w-fit">
                    <CardContent className="px-3 py-3">
                        this is content
                    </CardContent>
                </Card>
            </div>
        </Portal>
    );
}

export default Linkpopover;
